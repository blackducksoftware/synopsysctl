/*
Copyright (C) 2018 Synopsys, Inc.

Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements. See the NOTICE file
distributed with this work for additional information
regarding copyright ownership. The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied. See the License for the
specific language governing permissions and limitations
under the License.
*/

package api

import (
	routev1 "github.com/openshift/api/route/v1"
	corev1 "k8s.io/api/core/v1"
)

// Route defines the route component
type Route struct {
	Namespace          string
	Name               string
	Kind               string
	ServiceName        string
	PortName           string
	Labels             map[string]string
	TLSTerminationType routev1.TLSTerminationType
}

// PVC will contain the specifications of a Persistent Volume Claim
type PVC struct {
	Name         string `json:"name"`
	PVCName      string `json:"pvcName,omitempty"`
	Size         string `json:"size,omitempty"`
	StorageClass string `json:"storageClass,omitempty"`
	VolumeName   string `json:"volumeName,omitempty"`
}

// NodeAffinity will contain the specifications of a node affinity
// TODO: currently, keeping it simple, but can be modified in the future to take in complex scenarios
type NodeAffinity struct {
	AffinityType string   `json:"affinityType"`
	Key          string   `json:"key"`
	Op           string   `json:"op"`
	Values       []string `json:"values"`
}

// RegistryConfiguration contains the registry configuration
type RegistryConfiguration struct {
	Registry    string   `json:"registry"`
	PullSecrets []string `json:"pullSecrets"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RegistryConfiguration) DeepCopyInto(out *RegistryConfiguration) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BlackduckSpec.
func (in *RegistryConfiguration) DeepCopy() *RegistryConfiguration {
	if in == nil {
		return nil
	}
	out := new(RegistryConfiguration)
	in.DeepCopyInto(out)
	return out
}

// SecurityContext will contain the specifications of a security contexts
type SecurityContext struct {
	FsGroup    *int64 `json:"fsGroup"`
	RunAsUser  *int64 `json:"runAsUser"`
	RunAsGroup *int64 `json:"runAsGroup"`
}

// DeploymentResource contains the specification of a pod replica's, container memory and cpu limits and requests and container JVM heap max memory
type DeploymentResource struct {
	Replicas      *int32    `json:"replicas,omitempty"`
	Resources     Resources `json:"resources,omitempty"`
	HeapMaxMemory *string   `json:"heapMaxMemory,omitempty"`
}

// Resources contains specification for container requests and limits
type Resources struct {
	Requests Resource `json:"requests,omitempty"`
	Limits   Resource `json:"limits,omitempty"`
}

// Resource contains specification for container cpu and memory
type Resource struct {
	CPU    *string `json:"cpu,omitempty"`
	Memory *string `json:"memory,omitempty"`
}

// Host configures the Black Duck hosts
type Host struct {
	Scheme              string `json:"scheme"`
	Domain              string `json:"domain"` // it can be domain name or ip address
	Port                int    `json:"port"`
	User                string `json:"user"`
	Password            string `json:"password"`
	ConcurrentScanLimit int    `json:"concurrentScanLimit"`
}

// RegistryAuth will store the Secured Registries
type RegistryAuth struct {
	URL      string `json:"url"`
	User     string `json:"user"`
	Password string `json:"password"`
	Token    string `json:"token"`
}

// PVCVolumeConfig will store the PVC Volume configuration
type PVCVolumeConfig struct {
	VolumeName string
	PVCName    string
	ReadOnly   bool
}

// Volume defines the volume component
type Volume struct {
	*corev1.Volume
}
